{
  "pipelineSpec": {
    "components": {
      "comp-condition-1": {
        "dag": {
          "tasks": {
            "upload-model-to-gcs": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-upload-model-to-gcs"
              },
              "inputs": {
                "artifacts": {
                  "model": {
                    "componentInputArtifact": "pipelineparam--train-rfr-model"
                  }
                },
                "parameters": {
                  "model_repo": {
                    "componentInputParameter": "pipelineparam--model_repo"
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "upload-model-to-gcs"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--train-rfr-model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--model-evaluation-best_model": {
              "type": "STRING"
            },
            "pipelineparam--model_repo": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-2": {
        "dag": {
          "tasks": {
            "upload-model-to-gcs-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-upload-model-to-gcs-2"
              },
              "inputs": {
                "artifacts": {
                  "model": {
                    "componentInputArtifact": "pipelineparam--train-lr-model"
                  }
                },
                "parameters": {
                  "model_repo": {
                    "componentInputParameter": "pipelineparam--model_repo"
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "upload-model-to-gcs-2"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--train-lr-model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--model-evaluation-best_model": {
              "type": "STRING"
            },
            "pipelineparam--model_repo": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-importer": {
        "executorLabel": "exec-importer",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-evaluation": {
        "executorLabel": "exec-model-evaluation",
        "inputDefinitions": {
          "artifacts": {
            "lr_pred": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "rfr_pred": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "kpi": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "best_model": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-predict": {
        "executorLabel": "exec-model-predict",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "predictions": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-predict-2": {
        "executorLabel": "exec-model-predict-2",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "predictions": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-train-lr": {
        "executorLabel": "exec-train-lr",
        "inputDefinitions": {
          "artifacts": {
            "features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-train-rfr": {
        "executorLabel": "exec-train-rfr",
        "inputDefinitions": {
          "artifacts": {
            "features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-train-test-split": {
        "executorLabel": "exec-train-test-split",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "dataset_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-upload-model-to-gcs": {
        "executorLabel": "exec-upload-model-to-gcs",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "model_repo": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-upload-model-to-gcs-2": {
        "executorLabel": "exec-upload-model-to-gcs-2",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "model_repo": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-importer": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-model-evaluation": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_evaluation"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'sklearn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_evaluation(\n    test_set:  Input[Dataset],\n    rfr_pred: Input[Dataset],\n    lr_pred: Input[Dataset],\n    # rfr_metrics: Output[ClassificationMetrics],\n    # lr_metrics: Output[ClassificationMetrics],\n    kpi: Output[Metrics]\n) -> NamedTuple(\"output\", [(\"best_model\", str)]):\n\n    import pandas as pd\n    import logging     \n    from sklearn.metrics import confusion_matrix, mean_absolute_error\n    import json\n    import typing\n    import pickle\n\n    data = pd.read_csv(test_set.path+\".csv\")\n    y_true = data.loc[:, ['Price_euros']].values\n\n    rfr_pred = pd.read_csv(rfr_pred.path+\".csv\")\n    lr_pred = pd.read_csv(lr_pred.path+\".csv\")\n\n    mae_rfr = mean_absolute_error(y_true, rfr_pred.round())\n    mae_lr = mean_absolute_error(y_true, lr_pred.round())\n    mae_dict = {\"RFR\":mae_rfr,\"LR\":mae_lr}\n\n    kpi.log_metric(\"mae_lr\", float(mae_lr))\n    kpi.log_metric(\"mae_rfr\", float(mae_rfr))\n    best_model = min(mae_dict, key=mae_dict.get) # want min cause it's loss\n    logging.info(best_model+\" with a mae of \"+str(mae_dict[best_model]))\n    return (best_model,)\n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-model-predict": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_predict"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'sklearn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_predict(\n    test_set:  Input[Dataset],\n    model: Input[Model],\n    predictions: Output[Dataset],\n):\n\n    import pandas as pd\n    import logging     \n    from sklearn.metrics import roc_curve, confusion_matrix, accuracy_score\n    import json\n    import typing\n    import pickle\n\n    # split data\n    data = pd.read_csv(test_set.path+\".csv\")\n    X = data.loc[:, [\"Company\",\"TypeName\",\"Ram\",\"Weight\",\"TouchScreen\",\"IPS\",\"PPI\",\"Cpu_brand\",\"HDD\",\"SSD\",\"Gpu brand\",\"os\"]].values\n    y = data.loc[:, ['Price_euros']].values\n\n    # Loading the saved model with joblib\n    m_filename = model.path + \".pkl\"\n    model_loaded = pickle.load(open(m_filename, 'rb'))\n\n    # predict\n    logging.info(model_loaded.predict(X))\n    y_pred = pd.Series(model_loaded.predict(X).squeeze())\n    file_name = predictions.path + \".csv\"\n\n    y_pred.to_csv(file_name, index=False, encoding='utf-8-sig')\n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-model-predict-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "model_predict"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'sklearn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef model_predict(\n    test_set:  Input[Dataset],\n    model: Input[Model],\n    predictions: Output[Dataset],\n):\n\n    import pandas as pd\n    import logging     \n    from sklearn.metrics import roc_curve, confusion_matrix, accuracy_score\n    import json\n    import typing\n    import pickle\n\n    # split data\n    data = pd.read_csv(test_set.path+\".csv\")\n    X = data.loc[:, [\"Company\",\"TypeName\",\"Ram\",\"Weight\",\"TouchScreen\",\"IPS\",\"PPI\",\"Cpu_brand\",\"HDD\",\"SSD\",\"Gpu brand\",\"os\"]].values\n    y = data.loc[:, ['Price_euros']].values\n\n    # Loading the saved model with joblib\n    m_filename = model.path + \".pkl\"\n    model_loaded = pickle.load(open(m_filename, 'rb'))\n\n    # predict\n    logging.info(model_loaded.predict(X))\n    y_pred = pd.Series(model_loaded.predict(X).squeeze())\n    file_name = predictions.path + \".csv\"\n\n    y_pred.to_csv(file_name, index=False, encoding='utf-8-sig')\n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-train-lr": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train_lr"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train_lr (features: Input[Dataset], model: Output[Model]):\n    '''train a LinearRegressor with default parameters'''\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.compose import ColumnTransformer\n    from sklearn.pipeline import Pipeline\n    from sklearn.preprocessing import OneHotEncoder\n    from sklearn.linear_model import LinearRegression        \n    import pickle \n    import logging \n\n    data = pd.read_csv(features.path+\".csv\")\n    # split into input (X) and output (y) variables\n    X = data.loc[:, [\"Company\",\"TypeName\",\"Ram\",\"Weight\",\"TouchScreen\",\"IPS\",\"PPI\",\"Cpu_brand\",\"HDD\",\"SSD\",\"Gpu brand\",\"os\"]].values\n    y = data.loc[:, ['Price_euros']].values\n\n    # define model\n    step1 = ColumnTransformer(transformers=[\n    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])\n    ],remainder='passthrough')\n\n    step2 = LinearRegression()\n\n    pipe = Pipeline([\n        ('step1',step1),\n        ('step2',step2)\n    ])\n\n    pipe.fit(X,y)\n\n    logging.info(\"Fitted model\")\n\n    #model_lr = LinearRegression()\n    #model_lr.fit(data.drop('Price_euros',axis=1), data['Price_euros'])\n    model.metadata[\"framework\"] = \"LR\"\n    file_name = model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:  \n        pickle.dump(pipe, file)   \n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-train-rfr": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train_rfr"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train_rfr (features: Input[Dataset], model: Output[Model]):\n    '''train a RandomForestRegressor with default parameters'''\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.compose import ColumnTransformer\n    from sklearn.pipeline import Pipeline\n    from sklearn.preprocessing import OneHotEncoder\n    from sklearn.ensemble import RandomForestRegressor        \n    import pickle \n    import logging \n\n    data = pd.read_csv(features.path+\".csv\")\n    # split into input (X) and output (y) variables\n    X = data.loc[:, [\"Company\",\"TypeName\",\"Ram\",\"Weight\",\"TouchScreen\",\"IPS\",\"PPI\",\"Cpu_brand\",\"HDD\",\"SSD\",\"Gpu brand\",\"os\"]].values\n    y = data.loc[:, ['Price_euros']].values\n\n    # define model\n    step1 = ColumnTransformer(transformers=[\n    ('col_tnf',OneHotEncoder(sparse=False,drop='first'),[0,1,7,10,11])\n    ],remainder='passthrough')\n\n    step2 = RandomForestRegressor(n_estimators=100,\n                              random_state=3,\n                              max_samples=0.5,\n                              max_features=0.75,\n                              max_depth=15)\n\n    pipe = Pipeline([\n        ('step1',step1),\n        ('step2',step2)\n    ])\n\n    pipe.fit(X,y)\n\n    logging.info(\"Fitted model\")\n\n    #model_lr = LinearRegression()\n    #model_lr.fit(data.drop('Price_euros',axis=1), data['Price_euros'])\n    model.metadata[\"framework\"] = \"RFR\"\n    file_name = model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:  \n        pickle.dump(pipe, file)   \n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-train-test-split": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train_test_split"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train_test_split(dataset: Input[Dataset], dataset_train: Output[Dataset], dataset_test: Output[Dataset]):\n    '''train_test_split'''\n    import pandas as pd\n    import logging \n    import sys\n    from sklearn.model_selection import train_test_split as tts\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO) \n\n    alldata = pd.read_csv(dataset.path, index_col=0)\n    train, test = tts(alldata, test_size=0.15)\n    train.to_csv(dataset_train.path + \".csv\" , index=False, encoding='utf-8-sig')\n    test.to_csv(dataset_test.path + \".csv\" , index=False, encoding='utf-8-sig')\n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-upload-model-to-gcs": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "upload_model_to_gcs"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-storage' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model: Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)    \n\n    # upload the model to GCS\n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob('laptop_pricer_model.pkl') \n    blob.upload_from_filename(model.path + '.pkl')   \n\n\n    print(\"Saved the model to GCP bucket : \" + model_repo)\n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        },
        "exec-upload-model-to-gcs-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "upload_model_to_gcs"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-storage' 'kfp==1.8.14' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model: Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)    \n\n    # upload the model to GCS\n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob('laptop_pricer_model.pkl') \n    blob.upload_from_filename(model.path + '.pkl')   \n\n\n    print(\"Saved the model to GCP bucket : \" + model_repo)\n\n"
            ],
            "image": "python:3.10.7-slim"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "laptop-pricer-pipeline"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "model-evaluation-kpi": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "kpi",
                  "producerSubtask": "model-evaluation"
                }
              ]
            }
          }
        },
        "tasks": {
          "condition-1": {
            "componentRef": {
              "name": "comp-condition-1"
            },
            "dependentTasks": [
              "model-evaluation",
              "train-rfr"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--train-rfr-model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "train-rfr"
                  }
                }
              },
              "parameters": {
                "pipelineparam--model-evaluation-best_model": {
                  "taskOutputParameter": {
                    "outputParameterKey": "best_model",
                    "producerTask": "model-evaluation"
                  }
                },
                "pipelineparam--model_repo": {
                  "componentInputParameter": "model_repo"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "condition-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--model-evaluation-best_model'].string_value == 'RFR'"
            }
          },
          "condition-2": {
            "componentRef": {
              "name": "comp-condition-2"
            },
            "dependentTasks": [
              "model-evaluation",
              "train-lr"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--train-lr-model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "train-lr"
                  }
                }
              },
              "parameters": {
                "pipelineparam--model-evaluation-best_model": {
                  "taskOutputParameter": {
                    "outputParameterKey": "best_model",
                    "producerTask": "model-evaluation"
                  }
                },
                "pipelineparam--model_repo": {
                  "componentInputParameter": "model_repo"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "condition-2"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--model-evaluation-best_model'].string_value == 'LR'"
            }
          },
          "importer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "dataset_uri"
                }
              }
            },
            "taskInfo": {
              "name": "importer"
            }
          },
          "model-evaluation": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-evaluation"
            },
            "dependentTasks": [
              "model-predict",
              "model-predict-2",
              "train-test-split"
            ],
            "inputs": {
              "artifacts": {
                "lr_pred": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "predictions",
                    "producerTask": "model-predict-2"
                  }
                },
                "rfr_pred": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "predictions",
                    "producerTask": "model-predict"
                  }
                },
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_test",
                    "producerTask": "train-test-split"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "model-evaluation"
            }
          },
          "model-predict": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-predict"
            },
            "dependentTasks": [
              "train-rfr",
              "train-test-split"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "train-rfr"
                  }
                },
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_test",
                    "producerTask": "train-test-split"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "model-predict"
            }
          },
          "model-predict-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-predict-2"
            },
            "dependentTasks": [
              "train-lr",
              "train-test-split"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "train-lr"
                  }
                },
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_test",
                    "producerTask": "train-test-split"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "model-predict-2"
            }
          },
          "train-lr": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-lr"
            },
            "dependentTasks": [
              "train-test-split"
            ],
            "inputs": {
              "artifacts": {
                "features": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_train",
                    "producerTask": "train-test-split"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train-lr"
            }
          },
          "train-rfr": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-rfr"
            },
            "dependentTasks": [
              "train-test-split"
            ],
            "inputs": {
              "artifacts": {
                "features": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_train",
                    "producerTask": "train-test-split"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train-rfr"
            }
          },
          "train-test-split": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-test-split"
            },
            "dependentTasks": [
              "importer"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train-test-split"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "data_bucket": {
            "type": "STRING"
          },
          "dataset_uri": {
            "type": "STRING"
          },
          "model_repo": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model-evaluation-kpi": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.14"
  },
  "runtimeConfig": {}
}